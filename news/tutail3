1. Consider the set L5 = {<M> : M is a TM such that |L(M)| ≥ 5}.
(a) Describe this set in English.

For a TM M in L5, the language of that TM is the set of strings more than 4 in length

(b) For the following TMs whose inputs are binary strings, state whether they are elements
of L5 or not:

i. M1(x) = “if |x| ≤ 4 accept, else reject.”
ii. M2(x) = “if x = 00000 accept, else reject.
iii. M3(x) = “loop.”

M1 not in L5
M2 in L5
M3 not in L5


(c) Prove L5 is recognisable.

R(<M>) = " Run M on all strings via dovetailing
            if |x|>=5, acc
            else loop "

2. Recall the set RejTM = {<M, w> : M is a TM such that M rejects on input w}.

(a) Prove RejTM is undecidable. Hint: Follow the proof of HaltTM’s undecidability from the
tutorial. Keep in mind in this proof we are interested in whether M(w) = rej, instead
of whether M(w) halts.

presume RejTM is decidable.

let D be the decider for it:
exists <M,w>: D(<M,w>) = acc if M(w) rejects
                         rej if M(w) loops

Build a TM T that makes D give a wrong answer,
T(<M>) = "Run D(<M,<M>>)
            if D(<M,<M>>) = acc, M(<M>) rejects, T loops.
            if D(<M,<M>>) = rej, M(<M>) loops, T rejects."

What happens if T(<T>)?
    T(<T>) rejects when D(<T, <T>>) = rej, which according to D, T(<T>) loops.
    T(<T>) loops when D(<T, <T>>) = acc, D, T(<T>) rejects.

So D is wrong on input T(<T>) hence D is not a decider for RejTM,
RejTM is undecidable.

===========================================================
primitive note-taking
===========================================================

presume HaltTM is decidable

let D be the decider for it
exists<M,w>: D(<M,w>) = acc if M(w) halts
                        rej if M(w) loops
Build a modified machine T that make D give a wrong answer
T(<M>) = "Run D(<M,<M>>)
            if D(<M,<M>>) = acc, M(<M>) halts, T loops.
            if D(<M,<M>>) = rej, M(<M>) loops, T halts."
What happens if T(<T>)?
    T(<T>) halts when D(<T, <T>>) = rej, which according to D, T(<T>) loops.
    T(<T>) loops when D(<T, <T>>) = acc, D, T(<T>) halts.
So D is wrong on input T(<T>) hence D is not a decider for HaltTM,
HaltTM is undecidable.




(b) You proved last week that RejTM is recognisable. Is its complement RejTM recognisable?
Its complement (RejTM) is not Turing-recognisable.

According to the theorem, RejTM is exactly decidable iff it and its complement are both recognisable.
Due to RejTM is undecidable and recognisable, Its complement (RejTM) is unrecognisable.
